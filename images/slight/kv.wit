// A key-value store interface.
use { error, payload } from types
use { observable } from resources

resource kv {
	// open a key-value store
	static open: func(name: string) -> expected<kv, error>

	// get the payload for a given key.
	get: func(key: string) -> expected<payload, error> 

	// set the payload for a given key.
	set: func(key: string, value: payload) -> expected<unit, error>

	// delete the payload for a given key.
	delete: func(key:string) -> expected<unit, error>

	// watch for changes to a key.
	watch: func(key: string) -> expected<observable, error>
}